{
  "address": "0xEEf93933b376674D6D95768fdD8cCaF75882dB4d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethInput",
          "type": "uint256"
        }
      ],
      "name": "EthToTokenSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityMinted",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensInput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityProvided",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityRemover",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidityWithdrawn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensOutput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensInput",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "name": "TokenToEthSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokensDeposited",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "lp",
          "type": "address"
        }
      ],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "xInput",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "xReserves",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yReserves",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenInput",
          "type": "uint256"
        }
      ],
      "name": "tokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ethOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "eth_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "token_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d1fc36ace56d81ef4e29728df18400eaff7fb8cf61030e8bffa0e2958dac8a0",
  "receipt": {
    "to": null,
    "from": "0x4262Aa56B97f776C075883b6077719ca3B997023",
    "contractAddress": "0xEEf93933b376674D6D95768fdD8cCaF75882dB4d",
    "transactionIndex": 65,
    "gasUsed": "895753",
    "logsBloom": "0x
    "blockHash": "0xe143ee2c196ae39d134e16b079345e746fbd9da30147ae67956cec15959e56a9",
    "transactionHash": "0x7d1fc36ace56d81ef4e29728df18400eaff7fb8cf61030e8bffa0e2958dac8a0",
    "logs": [],
    "blockNumber": 6209570,
    "cumulativeGasUsed": "10784857",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2A9a033bC8baD3B989061eCA5eeB90168901bf66"
  ],
  "numDeployments": 1,
  "solcInputHash": "fe9fdf188aed130ac52980314c17ef75",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_addr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethInput\",\"type\":\"uint256\"}],\"name\":\"EthToTokenSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInput\",\"type\":\"uint256\"}],\"name\":\"LiquidityProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityRemover\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityWithdrawn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensOutput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensInput\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"name\":\"TokenToEthSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensDeposited\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"}],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"xInput\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"xReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yReserves\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenInput\",\"type\":\"uint256\"}],\"name\":\"tokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"ethToToken()\":{\"details\":\"Make sure to exclude the amount of Ether sent while calculating the price.\"},\"init(uint256)\":{\"details\":\"Contract deployer should call this function with the amount of LPTs and Ether they want for the initial liquidity pool.\",\"params\":{\"tokens\":\"amount of LPTs to be transferred to DEX\"}},\"price(uint256,uint256,uint256)\":{\"details\":\"Follow along with the [original tutorial](https://medium.com/@austin_48503/%EF%B8%8F-minimum-viable-exchange-d84f30bd0c90) Price section for an understanding of the DEX's pricing model and for a price function to add to your contract. No modifications are allowed.\",\"params\":{\"xInput\":\"\\uad50\\ud658\\ud558\\ub824\\ub294 \\uc785\\ub825 \\uc790\\uc0b0\\uc758 \\uc591\",\"xReserves\":\"DEX \\uacc4\\uc57d\\uc5d0 \\ubcf4\\uc720\\ub41c \\uc785\\ub825 \\uc790\\uc0b0\\uc758 \\uc608\\ube44\\uae08\",\"yReserves\":\"DEX \\uacc4\\uc57d\\uc5d0 \\ubcf4\\uc720\\ub41c \\ucd9c\\ub825 \\uc790\\uc0b0\\uc758 \\uc608\\ube44\\uae08\"},\"returns\":{\"yOutput\":\"\\uad50\\ud658\\ud560 \\ub54c\\uc758 \\ucd9c\\ub825 \\uc790\\uc0b0\\uc758 \\uc591\"}},\"tokenToEth(uint256)\":{\"details\":\"Make sure to exclude the amount of LPTs while calculating the price if they already transferred to DEX.\"}},\"version\":1},\"userdoc\":{\"events\":{\"EthToTokenSwap(address,uint256,uint256)\":{\"notice\":\"Emitted when ethToToken() swap transacted\"},\"LiquidityProvided(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity provided to DEX and mints LPTs.\"},\"LiquidityRemoved(address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity removed from DEX and decreases LPT count within DEX.\"},\"TokenToEthSwap(address,uint256,uint256)\":{\"notice\":\"Emitted when tokenToEth() swap transacted\"}},\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"allows deposits of $BAL and $ETH to liquidity pool NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $BAL needed as well and taken from the depositor. NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call. NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\"},\"ethToToken()\":{\"notice\":\"Sends Ether in exchange for LPTs. The amount of LPTs is determined by the price function.\"},\"getLiquidity(address)\":{\"notice\":\"returns liquidity of a liquidity provider.\"},\"init(uint256)\":{\"notice\":\"Contract initializer.\"},\"tokenToEth(uint256)\":{\"notice\":\"Sends LPTs in exchange for Ether. The amount of Ether is determined by the price function.\"},\"withdraw(uint256)\":{\"notice\":\"allows withdrawal of $BAL and $ETH from liquidity pool\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DEX.sol\":\"DEX\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/DEX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IDEX {\\n\\t/**\\n\\t * @notice Contract initializer.\\n\\t * @dev Contract deployer should call this function with the amount of LPTs and Ether they want for the initial liquidity pool.\\n\\t * @param tokens amount of LPTs to be transferred to DEX\\n\\t */\\n\\tfunction init(uint256 tokens) external payable returns (uint256);\\n\\n\\t/**\\n\\t * @notice Sends Ether in exchange for LPTs. The amount of LPTs is determined by the price function.\\n\\t * @dev Make sure to exclude the amount of Ether sent while calculating the price.\\n\\t */\\n\\tfunction ethToToken() external payable returns (uint256 tokenOutput);\\n\\n\\t/**\\n\\t * @notice Sends LPTs in exchange for Ether. The amount of Ether is determined by the price function.\\n\\t * @dev Make sure to exclude the amount of LPTs while calculating the price if they already transferred to DEX.\\n\\t */\\n\\tfunction tokenToEth(\\n\\t\\tuint256 tokenInput\\n\\t) external returns (uint256 ethOutput);\\n\\n\\t/**\\n\\t * @notice allows deposits of $BAL and $ETH to liquidity pool\\n\\t * NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $BAL needed as well and taken from the depositor.\\n\\t * NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call.\\n\\t * NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM.\\n\\t */\\n\\tfunction deposit() external payable returns (uint256 tokensDeposited);\\n\\n\\t/**\\n\\t * @notice allows withdrawal of $BAL and $ETH from liquidity pool\\n\\t */\\n\\tfunction withdraw(\\n\\t\\tuint256 amount\\n\\t) external returns (uint256 eth_amount, uint256 token_amount);\\n}\\n\\nabstract contract _DEX is IDEX {\\n\\t/**\\n\\t * @dev Follow along with the [original tutorial](https://medium.com/@austin_48503/%EF%B8%8F-minimum-viable-exchange-d84f30bd0c90) Price section for an understanding of the DEX's pricing model and for a price function to add to your contract. No modifications are allowed.\\n\\t * @param xInput \\uad50\\ud658\\ud558\\ub824\\ub294 \\uc785\\ub825 \\uc790\\uc0b0\\uc758 \\uc591\\n\\t * @param xReserves DEX \\uacc4\\uc57d\\uc5d0 \\ubcf4\\uc720\\ub41c \\uc785\\ub825 \\uc790\\uc0b0\\uc758 \\uc608\\ube44\\uae08\\n\\t * @param yReserves DEX \\uacc4\\uc57d\\uc5d0 \\ubcf4\\uc720\\ub41c \\ucd9c\\ub825 \\uc790\\uc0b0\\uc758 \\uc608\\ube44\\uae08\\n\\t * @return yOutput \\uad50\\ud658\\ud560 \\ub54c\\uc758 \\ucd9c\\ub825 \\uc790\\uc0b0\\uc758 \\uc591\\n\\t */\\n\\tfunction price(\\n\\t\\tuint256 xInput,\\n\\t\\tuint256 xReserves,\\n\\t\\tuint256 yReserves\\n\\t) public pure returns (uint256 yOutput) {\\n\\t\\tuint256 EXCHANGE_FEE_PER_1000 = 3; // 0.3% fee\\n\\t\\tuint256 xInputAfterFee = xInput * (1000 - EXCHANGE_FEE_PER_1000);\\n\\t\\tuint256 numerator = xInputAfterFee * yReserves;\\n\\t\\tuint256 denominator = xReserves * 1000 + xInputAfterFee;\\n\\t\\trequire(denominator > 0, \\\"division by zero\\\");\\n\\t\\tyOutput = numerator / denominator;\\n\\t\\treturn yOutput;\\n\\t}\\n\\n\\t/**\\n\\t * @notice returns liquidity of a liquidity provider.\\n\\t */\\n\\tfunction getLiquidity(address lp) public view virtual returns (uint256);\\n}\\n\\ncontract DEX is _DEX {\\n\\t/* ========== GLOBAL VARIABLES ========== */\\n\\n\\tIERC20 public token;\\n\\tuint256 public totalLiquidity; // sum of all liquidity of LPs\\n\\n\\taddress private THIS = address(this);\\n\\tmapping(address => uint256) private liquidity;\\n\\tbool private initialized;\\n\\n\\t/* ========== EVENTS ========== */\\n\\n\\t/**\\n\\t * @notice Emitted when ethToToken() swap transacted\\n\\t */\\n\\tevent EthToTokenSwap(\\n\\t\\taddress swapper,\\n\\t\\tuint256 tokenOutput,\\n\\t\\tuint256 ethInput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when tokenToEth() swap transacted\\n\\t */\\n\\tevent TokenToEthSwap(\\n\\t\\taddress swapper,\\n\\t\\tuint256 tokensInput,\\n\\t\\tuint256 ethOutput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when liquidity provided to DEX and mints LPTs.\\n\\t */\\n\\tevent LiquidityProvided(\\n\\t\\taddress liquidityProvider,\\n\\t\\tuint256 liquidityMinted,\\n\\t\\tuint256 ethInput,\\n\\t\\tuint256 tokensInput\\n\\t);\\n\\n\\t/**\\n\\t * @notice Emitted when liquidity removed from DEX and decreases LPT count within DEX.\\n\\t */\\n\\tevent LiquidityRemoved(\\n\\t\\taddress liquidityRemover,\\n\\t\\tuint256 liquidityWithdrawn,\\n\\t\\tuint256 tokensOutput,\\n\\t\\tuint256 ethOutput\\n\\t);\\n\\n\\t/* ========== MODIFIERS ========== */\\n\\n\\tmodifier positiveMessageValue() {\\n\\t\\trequire(msg.value > 0, \\\"msg.value must be positive\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier positiveInteger(uint256 param) {\\n\\t\\trequire(param > 0, \\\"param must be positive\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier requireLiquidity(address owner, uint256 amount) {\\n\\t\\trequire(\\n\\t\\t\\tliquidity[owner] >= amount,\\n\\t\\t\\t\\\"require liquidity when withdrawing\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier ratioEqualExcludeEtherReceived(uint256 eth_sent) {\\n\\t\\tuint256 beforeRatio = getRatio(eth_sent);\\n\\t\\t_;\\n\\t\\trequire(beforeRatio == getRatio(0), \\\"Ratio changed\\\");\\n\\t}\\n\\n\\t/* ========== CONSTRUCTOR ========== */\\n\\n\\tconstructor(address token_addr) {\\n\\t\\ttoken = IERC20(token_addr);\\n\\t}\\n\\n\\t/* ========== EXTERNAL FUNCTIONS ========== */\\n\\n\\t// deployer initializes the DEX with Ether and tokens\\n\\t// return total amount of Ether in the liquidity pool\\n\\tfunction init(\\n\\t\\tuint256 tokens\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tpositiveMessageValue\\n\\t\\tpositiveInteger(tokens)\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\trequire(!initialized, \\\"DEX already initialized\\\");\\n\\t\\treceiveTokenFromCaller(tokens);\\n\\t\\treturn liquidity[msg.sender] = totalLiquidity = THIS.balance;\\n\\t}\\n\\n\\t// send Ether to DEX in exchange for tokens\\n\\t// return the amount of tokens received\\n\\tfunction ethToToken()\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tpositiveMessageValue\\n\\t\\treturns (uint256 tokenOutput)\\n\\t{\\n\\t\\ttokenOutput = exchange_ether_to_token(msg.value);\\n\\t\\tsendTokenToCaller(tokenOutput);\\n\\t\\temit EthToTokenSwap(msg.sender, tokenOutput, msg.value);\\n\\t\\treturn tokenOutput;\\n\\t}\\n\\n\\t// send tokens to DEX in exchange for Ether\\n\\t// return the amount of Ether received\\n\\tfunction tokenToEth(\\n\\t\\tuint256 tokenInput\\n\\t)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tpositiveInteger(tokenInput)\\n\\t\\treturns (uint256 ethOutput)\\n\\t{\\n\\t\\treceiveTokenFromCaller(tokenInput);\\n\\t\\tethOutput = exchange_token_to_ether(tokenInput);\\n\\t\\tpayable(msg.sender).transfer(ethOutput);\\n\\t\\temit TokenToEthSwap(msg.sender, tokenInput, ethOutput);\\n\\t\\treturn ethOutput;\\n\\t}\\n\\n\\t// deposits both Ether and tokens\\n\\t// the ratio of Ether to tokens will be maintained\\n\\t// return the amount of tokens deposited\\n\\tfunction deposit()\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\toverride\\n\\t\\tpositiveMessageValue\\n\\t\\tratioEqualExcludeEtherReceived(msg.value)\\n\\t\\treturns (uint256 tokensDeposited)\\n\\t{\\n\\t\\tuint256 eth_amount = msg.value;\\n\\t\\tuint256 eth_reserve = THIS.balance - eth_amount;\\n\\t\\taddLiquidity(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttokensDeposited = (eth_amount * totalLiquidity) / eth_reserve\\n\\t\\t);\\n\\n\\t\\tuint256 token_reserve = token.balanceOf(THIS);\\n\\t\\tuint256 token_amount = (eth_amount * token_reserve) / eth_reserve;\\n\\t\\treceiveTokenFromCaller(token_amount);\\n\\n\\t\\temit LiquidityProvided(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\ttokensDeposited,\\n\\t\\t\\teth_amount,\\n\\t\\t\\ttoken_amount\\n\\t\\t);\\n\\t\\treturn tokensDeposited;\\n\\t}\\n\\n\\t// allows withdrawal of $BAL and $ETH from liquidity pool\\n\\t// return the amount of Ether and tokens withdrawn\\n\\tfunction withdraw(\\n\\t\\tuint256 amount\\n\\t)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tpositiveInteger(amount)\\n\\t\\trequireLiquidity(msg.sender, amount)\\n\\t\\tratioEqualExcludeEtherReceived(0)\\n\\t\\treturns (uint256 eth_amount, uint256 token_amount)\\n\\t{\\n\\t\\tuint256 eth_reserve = THIS.balance;\\n\\t\\teth_amount = (amount * eth_reserve) / totalLiquidity;\\n\\n\\t\\tuint256 token_reserve = token.balanceOf(THIS);\\n\\t\\ttoken_amount = (amount * token_reserve) / totalLiquidity;\\n\\n\\t\\tpayable(msg.sender).transfer(eth_amount);\\n\\t\\tsubLiquidity(msg.sender, eth_amount);\\n\\t\\tsendTokenToCaller(token_amount);\\n\\n\\t\\temit LiquidityRemoved(msg.sender, eth_amount, token_amount, eth_amount);\\n\\t\\treturn (eth_amount, token_amount);\\n\\t}\\n\\n\\t/* ========== PRIVATE FUNCTIONS ========== */\\n\\n\\t// Note: DEX contract become a msg.sender when calling functions of a token contract.\\n\\t// To reduce confusion, all interactions with the token which modify its status are handled through private functions.\\n\\n\\tfunction receiveTokenFromCaller(\\n\\t\\tuint256 amount\\n\\t) private positiveInteger(amount) {\\n\\t\\trequire(\\n\\t\\t\\ttoken.allowance(msg.sender, THIS) >= amount,\\n\\t\\t\\t\\\"require allowance when receiving tokens\\\"\\n\\t\\t);\\n\\t\\ttoken.transferFrom(msg.sender, THIS, amount);\\n\\t}\\n\\n\\tfunction sendTokenToCaller(uint256 amount) private positiveInteger(amount) {\\n\\t\\ttoken.transfer(msg.sender, amount);\\n\\t}\\n\\n\\tfunction addLiquidity(address lp, uint256 amount) private {\\n\\t\\tliquidity[lp] += amount;\\n\\t\\ttotalLiquidity += amount;\\n\\t}\\n\\n\\tfunction subLiquidity(\\n\\t\\taddress lp,\\n\\t\\tuint256 amount\\n\\t) private requireLiquidity(lp, amount) {\\n\\t\\tliquidity[lp] -= amount;\\n\\t\\ttotalLiquidity -= amount;\\n\\t}\\n\\n\\t/* ========== PRIVATE VIEW FUNCTIONS ========== */\\n\\n\\t/**\\n\\t * @dev assume that ether already transferred to DEX. Which means an Ether balance of DEX contract is increased by etherInput. To calculate correct price, we need to subtract etherInput from the Ether balance of DEX contract.\\n\\t */\\n\\tfunction exchange_ether_to_token(\\n\\t\\tuint256 etherInput\\n\\t) private view returns (uint256 tokenOutput) {\\n\\t\\treturn\\n\\t\\t\\tprice(etherInput, THIS.balance - etherInput, token.balanceOf(THIS));\\n\\t}\\n\\n\\t/**\\n\\t * @dev assume that token already transferred to DEX. Which means a token balance of DEX contract is increased by tokenInput. To calculate correct price, we need to subtract tokenInput from the token balance of DEX contract.\\n\\t */\\n\\tfunction exchange_token_to_ether(\\n\\t\\tuint256 tokenInput\\n\\t) private view returns (uint256 etherOutput) {\\n\\t\\treturn\\n\\t\\t\\tprice(tokenInput, token.balanceOf(THIS) - tokenInput, THIS.balance);\\n\\t}\\n\\n\\tfunction getLiquidity(address lp) public view override returns (uint256) {\\n\\t\\treturn liquidity[lp];\\n\\t}\\n\\n\\tfunction getRatio(uint256 eth_sent) private view returns (uint256 ratio) {\\n\\t\\tuint256 eth_reserve = THIS.balance - eth_sent;\\n\\t\\tuint256 token_reserve = token.balanceOf(THIS);\\n\\t\\tratio = eth_reserve / token_reserve;\\n\\t\\treturn ratio;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa62fb825417227749988793cd512f05ad78ec0c07e88affb7511798742c3cdc9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600280546001600160a01b0319163017905534801561002257600080fd5b50604051610f0a380380610f0a83398101604081905261004191610066565b600080546001600160a01b0319166001600160a01b0392909216919091179055610096565b60006020828403121561007857600080fd5b81516001600160a01b038116811461008f57600080fd5b9392505050565b610e65806100a56000396000f3fe6080604052600436106100865760003560e01c8063789770f411610059578063789770f414610129578063a747b93b14610131578063b7b0422d14610167578063d0e30db01461017a578063fc0c546a1461018257600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d457806370b2a30f14610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf366004610c61565b6101ba565b3480156100e057600080fd5b506100f46100ef366004610c8d565b61025e565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a1610124366004610c8d565b610457565b6100a1610504565b34801561013d57600080fd5b506100a161014c366004610ca6565b6001600160a01b031660009081526003602052604090205490565b6100a1610175366004610c8d565b61057b565b6100a1610644565b34801561018e57600080fd5b506000546101a2906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b60006003816101cb826103e8610cec565b6101d59087610cff565b905060006101e38583610cff565b90506000826101f4886103e8610cff565b6101fe9190610d16565b9050600081116102485760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b60448201526064015b60405180910390fd5b6102528183610d29565b98975050505050505050565b60008082600081116102825760405162461bcd60e51b815260040161023f90610d4b565b3360008181526003602052604090205485908111156102b35760405162461bcd60e51b815260040161023f90610d7b565b6000806102bf826107e6565b6002546001549192506001600160a01b031631906102dd828b610cff565b6102e79190610d29565b600080546002546040516370a0823160e01b81526001600160a01b039182166004820152939b5091929116906370a0823190602401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610dbd565b60015490915061036d828c610cff565b6103779190610d29565b60405190985033908a156108fc02908b906000818181858888f193505050501580156103a7573d6000803e3d6000fd5b506103b2338a61088d565b6103bb88610915565b60408051338152602081018b9052908101899052606081018a90527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a1505061040f60006107e6565b811461044d5760405162461bcd60e51b815260206004820152600d60248201526c14985d1a5bc818da185b99d959609a1b604482015260640161023f565b5050505050915091565b6000816000811161047a5760405162461bcd60e51b815260040161023f90610d4b565b610483836109b1565b61048c83610aeb565b604051909250339083156108fc029084906000818181858888f193505050501580156104bc573d6000803e3d6000fd5b5060408051338152602081018590529081018390527f472303b1e7ca7d00fb77f255c0a8c577f9ca4264c0306aaed3ff18e831523a6d9060600160405180910390a150919050565b60008034116105255760405162461bcd60e51b815260040161023f90610dd6565b61052e34610b86565b905061053981610915565b6040805133815260208101839052348183015290517f6d4870e9281c01ea54a4420c8684ac713b77f0c590b40c4b1fbf4c6ba892ccea9181900360600190a190565b600080341161059c5760405162461bcd60e51b815260040161023f90610dd6565b81600081116105bd5760405162461bcd60e51b815260040161023f90610d4b565b60045460ff16156106105760405162461bcd60e51b815260206004820152601760248201527f44455820616c726561647920696e697469616c697a6564000000000000000000604482015260640161023f565b610619836109b1565b50506002546001600160a01b0316316001819055336000908152600360205260409020819055919050565b60008034116106655760405162461bcd60e51b815260040161023f90610dd6565b346000610671826107e6565b60025490915034906000906106919083906001600160a01b031631610cec565b90506106b83382600154856106a69190610cff565b6106b09190610d29565b965086610c17565b600080546002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190610dbd565b90506000826107388386610cff565b6107429190610d29565b905061074d816109b1565b6040805133815260208101899052908101859052606081018290527f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009060800160405180910390a1505050506107a360006107e6565b81146107e15760405162461bcd60e51b815260206004820152600d60248201526c14985d1a5bc818da185b99d959609a1b604482015260640161023f565b505090565b60025460009081906108039084906001600160a01b031631610cec565b600080546002546040516370a0823160e01b81526001600160a01b03918216600482015293945091929116906370a0823190602401602060405180830381865afa158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190610dbd565b90506108858183610d29565b949350505050565b6001600160a01b038216600090815260036020526040902054829082908111156108c95760405162461bcd60e51b815260040161023f90610d7b565b6001600160a01b038416600090815260036020526040812080548592906108f1908490610cec565b92505081905550826001600082825461090a9190610cec565b909155505050505050565b80600081116109365760405162461bcd60e51b815260040161023f90610d4b565b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af1158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190610e0d565b505050565b80600081116109d25760405162461bcd60e51b815260040161023f90610d4b565b600054600254604051636eb1769f60e11b81523360048201526001600160a01b0391821660248201528492919091169063dd62ed3e90604401602060405180830381865afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190610dbd565b1015610aaa5760405162461bcd60e51b815260206004820152602760248201527f7265717569726520616c6c6f77616e6365207768656e20726563656976696e6760448201526620746f6b656e7360c81b606482015260840161023f565b6000546002546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd90606401610969565b600080546002546040516370a0823160e01b81526001600160a01b039182166004820152610b8092859283929116906370a0823190602401602060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190610dbd565b610b6e9190610cec565b6002546001600160a01b0316316101ba565b92915050565b600254600090610b80908390610ba79082906001600160a01b031631610cec565b6000546002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf9190610dbd565b6001600160a01b03821660009081526003602052604081208054839290610c3f908490610d16565b925050819055508060016000828254610c589190610d16565b90915550505050565b600080600060608486031215610c7657600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c9f57600080fd5b5035919050565b600060208284031215610cb857600080fd5b81356001600160a01b0381168114610ccf57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b8057610b80610cd6565b8082028115828204841417610b8057610b80610cd6565b80820180821115610b8057610b80610cd6565b600082610d4657634e487b7160e01b600052601260045260246000fd5b500490565b602080825260169082015275706172616d206d75737420626520706f73697469766560501b604082015260600190565b60208082526022908201527f72657175697265206c6971756964697479207768656e207769746864726177696040820152616e6760f01b606082015260800190565b600060208284031215610dcf57600080fd5b5051919050565b6020808252601a908201527f6d73672e76616c7565206d75737420626520706f736974697665000000000000604082015260600190565b600060208284031215610e1f57600080fd5b81518015158114610ccf57600080fdfea26469706673582212209a7c99ecfb420f445ba02ca02ebef3db2a78daa4e5d3d58ea7b55d0fdfe5f9f664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063789770f411610059578063789770f414610129578063a747b93b14610131578063b7b0422d14610167578063d0e30db01461017a578063fc0c546a1461018257600080fd5b806315770f921461008b5780632071a9f4146100b45780632e1a7d4d146100d457806370b2a30f14610109575b600080fd5b34801561009757600080fd5b506100a160015481565b6040519081526020015b60405180910390f35b3480156100c057600080fd5b506100a16100cf366004610c61565b6101ba565b3480156100e057600080fd5b506100f46100ef366004610c8d565b61025e565b604080519283526020830191909152016100ab565b34801561011557600080fd5b506100a1610124366004610c8d565b610457565b6100a1610504565b34801561013d57600080fd5b506100a161014c366004610ca6565b6001600160a01b031660009081526003602052604090205490565b6100a1610175366004610c8d565b61057b565b6100a1610644565b34801561018e57600080fd5b506000546101a2906001600160a01b031681565b6040516001600160a01b0390911681526020016100ab565b60006003816101cb826103e8610cec565b6101d59087610cff565b905060006101e38583610cff565b90506000826101f4886103e8610cff565b6101fe9190610d16565b9050600081116102485760405162461bcd60e51b815260206004820152601060248201526f6469766973696f6e206279207a65726f60801b60448201526064015b60405180910390fd5b6102528183610d29565b98975050505050505050565b60008082600081116102825760405162461bcd60e51b815260040161023f90610d4b565b3360008181526003602052604090205485908111156102b35760405162461bcd60e51b815260040161023f90610d7b565b6000806102bf826107e6565b6002546001549192506001600160a01b031631906102dd828b610cff565b6102e79190610d29565b600080546002546040516370a0823160e01b81526001600160a01b039182166004820152939b5091929116906370a0823190602401602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610dbd565b60015490915061036d828c610cff565b6103779190610d29565b60405190985033908a156108fc02908b906000818181858888f193505050501580156103a7573d6000803e3d6000fd5b506103b2338a61088d565b6103bb88610915565b60408051338152602081018b9052908101899052606081018a90527f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060800160405180910390a1505061040f60006107e6565b811461044d5760405162461bcd60e51b815260206004820152600d60248201526c14985d1a5bc818da185b99d959609a1b604482015260640161023f565b5050505050915091565b6000816000811161047a5760405162461bcd60e51b815260040161023f90610d4b565b610483836109b1565b61048c83610aeb565b604051909250339083156108fc029084906000818181858888f193505050501580156104bc573d6000803e3d6000fd5b5060408051338152602081018590529081018390527f472303b1e7ca7d00fb77f255c0a8c577f9ca4264c0306aaed3ff18e831523a6d9060600160405180910390a150919050565b60008034116105255760405162461bcd60e51b815260040161023f90610dd6565b61052e34610b86565b905061053981610915565b6040805133815260208101839052348183015290517f6d4870e9281c01ea54a4420c8684ac713b77f0c590b40c4b1fbf4c6ba892ccea9181900360600190a190565b600080341161059c5760405162461bcd60e51b815260040161023f90610dd6565b81600081116105bd5760405162461bcd60e51b815260040161023f90610d4b565b60045460ff16156106105760405162461bcd60e51b815260206004820152601760248201527f44455820616c726561647920696e697469616c697a6564000000000000000000604482015260640161023f565b610619836109b1565b50506002546001600160a01b0316316001819055336000908152600360205260409020819055919050565b60008034116106655760405162461bcd60e51b815260040161023f90610dd6565b346000610671826107e6565b60025490915034906000906106919083906001600160a01b031631610cec565b90506106b83382600154856106a69190610cff565b6106b09190610d29565b965086610c17565b600080546002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107299190610dbd565b90506000826107388386610cff565b6107429190610d29565b905061074d816109b1565b6040805133815260208101899052908101859052606081018290527f3bca7014f4c0ccc8016338c79f4c00e82068dbadaf4f01ca5449040fdd39f5009060800160405180910390a1505050506107a360006107e6565b81146107e15760405162461bcd60e51b815260206004820152600d60248201526c14985d1a5bc818da185b99d959609a1b604482015260640161023f565b505090565b60025460009081906108039084906001600160a01b031631610cec565b600080546002546040516370a0823160e01b81526001600160a01b03918216600482015293945091929116906370a0823190602401602060405180830381865afa158015610855573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108799190610dbd565b90506108858183610d29565b949350505050565b6001600160a01b038216600090815260036020526040902054829082908111156108c95760405162461bcd60e51b815260040161023f90610d7b565b6001600160a01b038416600090815260036020526040812080548592906108f1908490610cec565b92505081905550826001600082825461090a9190610cec565b909155505050505050565b80600081116109365760405162461bcd60e51b815260040161023f90610d4b565b60005460405163a9059cbb60e01b8152336004820152602481018490526001600160a01b039091169063a9059cbb906044015b6020604051808303816000875af1158015610988573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ac9190610e0d565b505050565b80600081116109d25760405162461bcd60e51b815260040161023f90610d4b565b600054600254604051636eb1769f60e11b81523360048201526001600160a01b0391821660248201528492919091169063dd62ed3e90604401602060405180830381865afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190610dbd565b1015610aaa5760405162461bcd60e51b815260206004820152602760248201527f7265717569726520616c6c6f77616e6365207768656e20726563656976696e6760448201526620746f6b656e7360c81b606482015260840161023f565b6000546002546040516323b872dd60e01b81523360048201526001600160a01b039182166024820152604481018590529116906323b872dd90606401610969565b600080546002546040516370a0823160e01b81526001600160a01b039182166004820152610b8092859283929116906370a0823190602401602060405180830381865afa158015610b40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b649190610dbd565b610b6e9190610cec565b6002546001600160a01b0316316101ba565b92915050565b600254600090610b80908390610ba79082906001600160a01b031631610cec565b6000546002546040516370a0823160e01b81526001600160a01b0391821660048201529116906370a0823190602401602060405180830381865afa158015610bf3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cf9190610dbd565b6001600160a01b03821660009081526003602052604081208054839290610c3f908490610d16565b925050819055508060016000828254610c589190610d16565b90915550505050565b600080600060608486031215610c7657600080fd5b505081359360208301359350604090920135919050565b600060208284031215610c9f57600080fd5b5035919050565b600060208284031215610cb857600080fd5b81356001600160a01b0381168114610ccf57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b8057610b80610cd6565b8082028115828204841417610b8057610b80610cd6565b80820180821115610b8057610b80610cd6565b600082610d4657634e487b7160e01b600052601260045260246000fd5b500490565b602080825260169082015275706172616d206d75737420626520706f73697469766560501b604082015260600190565b60208082526022908201527f72657175697265206c6971756964697479207768656e207769746864726177696040820152616e6760f01b606082015260800190565b600060208284031215610dcf57600080fd5b5051919050565b6020808252601a908201527f6d73672e76616c7565206d75737420626520706f736974697665000000000000604082015260600190565b600060208284031215610e1f57600080fd5b81518015158114610ccf57600080fdfea26469706673582212209a7c99ecfb420f445ba02ca02ebef3db2a78daa4e5d3d58ea7b55d0fdfe5f9f664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "ethToToken()": {
        "details": "Make sure to exclude the amount of Ether sent while calculating the price."
      },
      "init(uint256)": {
        "details": "Contract deployer should call this function with the amount of LPTs and Ether they want for the initial liquidity pool.",
        "params": {
          "tokens": "amount of LPTs to be transferred to DEX"
        }
      },
      "price(uint256,uint256,uint256)": {
        "details": "Follow along with the [original tutorial](https://medium.com/@austin_48503/%EF%B8%8F-minimum-viable-exchange-d84f30bd0c90) Price section for an understanding of the DEX's pricing model and for a price function to add to your contract. No modifications are allowed.",
        "params": {
          "xInput": "교환하려는 입력 자산의 양",
          "xReserves": "DEX 계약에 보유된 입력 자산의 예비금",
          "yReserves": "DEX 계약에 보유된 출력 자산의 예비금"
        },
        "returns": {
          "yOutput": "교환할 때의 출력 자산의 양"
        }
      },
      "tokenToEth(uint256)": {
        "details": "Make sure to exclude the amount of LPTs while calculating the price if they already transferred to DEX."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "EthToTokenSwap(address,uint256,uint256)": {
        "notice": "Emitted when ethToToken() swap transacted"
      },
      "LiquidityProvided(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity provided to DEX and mints LPTs."
      },
      "LiquidityRemoved(address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity removed from DEX and decreases LPT count within DEX."
      },
      "TokenToEthSwap(address,uint256,uint256)": {
        "notice": "Emitted when tokenToEth() swap transacted"
      }
    },
    "kind": "user",
    "methods": {
      "deposit()": {
        "notice": "allows deposits of $BAL and $ETH to liquidity pool NOTE: parameter is the msg.value sent with this function call. That amount is used to determine the amount of $BAL needed as well and taken from the depositor. NOTE: user has to make sure to give DEX approval to spend their tokens on their behalf by calling approve function prior to this function call. NOTE: Equal parts of both assets will be removed from the user's wallet with respect to the price outlined by the AMM."
      },
      "ethToToken()": {
        "notice": "Sends Ether in exchange for LPTs. The amount of LPTs is determined by the price function."
      },
      "getLiquidity(address)": {
        "notice": "returns liquidity of a liquidity provider."
      },
      "init(uint256)": {
        "notice": "Contract initializer."
      },
      "tokenToEth(uint256)": {
        "notice": "Sends LPTs in exchange for Ether. The amount of Ether is determined by the price function."
      },
      "withdraw(uint256)": {
        "notice": "allows withdrawal of $BAL and $ETH from liquidity pool"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 190,
        "contract": "contracts/DEX.sol:DEX",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 192,
        "contract": "contracts/DEX.sol:DEX",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 198,
        "contract": "contracts/DEX.sol:DEX",
        "label": "THIS",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 202,
        "contract": "contracts/DEX.sol:DEX",
        "label": "liquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 204,
        "contract": "contracts/DEX.sol:DEX",
        "label": "initialized",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}